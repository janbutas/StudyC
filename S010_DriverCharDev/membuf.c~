#include <linux/init.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/fs.h>
#include <asm/uaccess.h>        /* for put_user */

/*  
 *  Prototypes âˆ’ this would normally go in a .h file
 */
int init_module(void);
void cleanup_module(void);
static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char *, size_t, loff_t *);


#define BUF_SIZE 20             /* Number of integers in buffer to be allocated*/
#define SUCCESS 0
#define DEVICE_NAME "chardev"   /* Dev name as it appears in /proc/devices   */
#define MSG_LEN 80              /* Max length of the message from the device */


/* 
 * Global variables are declared as static, so are global within the file. 
 */
static int Major;               /* Major number assigned to our device driver */
static int Device_Open = 0;     /* Is device open?  
                                 * Used to prevent multiple access to device */
static char msg[BUF_LEN];       /* The msg the device will give when asked */
static char *msg_Ptr;
static struct file_operations fops = {
        .read = device_read,
        .write = device_write,
        .open = device_open,
        .release = device_release
};

static int* buf_ptr;




static int __init my_init(void) {
  
  int index;

  Major = register_chrdev(0, DEVICE_NAME, &fops);
  if (Major < 0) {
    printk(KERN_ALERT "Registering char device failed with %d\n", Major);
    return Major;
  }
  printk(KERN_INFO "I was assigned major number %d. To talk to\n", Major);
  printk(KERN_INFO "the driver, create a dev file with\n");

  printk(KERN_INFO "'mknod /dev/%s c %d 0'.\n", DEVICE_NAME, Major);
  printk(KERN_INFO "Try various minor numbers. Try to cat and echo to\n");
  printk(KERN_INFO "the device file.\n");
  printk(KERN_INFO "Remove the device file and module when done.\n");
  printk(KERN_INFO "Trying to allocate %d\n",BUF_SIZE);
  

  buf_ptr = (int*) kmalloc(sizeof(int)*BUF_SIZE, GFP_KERNEL);

  if (!buf_ptr) {
    printk(KERN_INFO "Unable to allocate\n");    
    return 1;
  }
  printk(KERN_INFO "Allocated buffer address = %p\n", buf_ptr);
  
  for (index=0; index < BUF_SIZE; index++){
    *(buf_ptr+index) = index;
  }

return  0;  
}
  
/* Cleanup - undid whatever init_module did */
static void __exit my_exit(void) {

  int index;
  printk(KERN_INFO "Trying to free allocated buffer %p \n",buf_ptr);

  for (index = 0; index < BUF_SIZE; index++ ) {
    printk(KERN_INFO " %d ",*(buf_ptr+index));
  }

  printk(KERN_INFO " \n");
  
  if (buf_ptr){
    kfree(buf_ptr);
  }
}

module_init(my_init);
module_exit(my_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Jan Butas");
MODULE_DESCRIPTION("Study Driver");
MODULE_SUPPORTED_DEVICE("Siemens");
